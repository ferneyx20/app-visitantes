Sistema de Registro de Visitantes

Este proyecto es una aplicación web completa para gestionar visitas en una empresa o institución. Permite registrar visitas de manera manual o autogestionada, y administrar usuarios, empleados y sedes. Está diseñada para dos tipos de usuario (administrador y estándar), e incluye funcionalidades móviles.

Requisitos del Proyecto

Roles del sistema:

Administrador: acceso completo a todas las funciones.

Usuario Estándar: acceso limitado a funcionalidades esenciales.

Visitante (sin cuenta): puede registrar una visita desde un enlace público (autogestión).

Funcionalidades Generales

1. Inicio de Sesión

Ruta: /login

Campos: correo, contraseña

Seguridad: autenticación JWT

Redirección según rol:

Administrador: /admin/dashboard

Estándar: /usuario/dashboard

2. Panel de Administración /admin/dashboard

crear barra lateral con botones

predeterminado (

Ver visitas (todas)

Ver visitas activas) y estadisticas de visitas por sede fecha menu  (total, activas, finalizadas)

boton consultas 
( ingresar por barra lateral ) Consultar visitas finalizadas

boton usuarios 
Ver y aprobar usuarios pendientes y activos 

boton empleados 
Ver y administrar empleados

esto en la venta predeterminada con simblolo boton + en la parte superior derecha
Añadir nueva visita y abrir formulario de visita

en panel predeterminado vistas activas en una galeria solamente, las inactivas solo visibles desde consultas
Cambiar estado de visitas (finalizar, rechazar)

boton de enlace al lado de boton + genera un qr para escanear y envia a formulario de visita autogestionada
Acceder al enlace de visita autogestionada

Aprobar/rechazar visitas autogestionadas
tambien desde panel de administración

boton sedes 
Ver y administrar sedes
añadir nueva sede y editar los existentes

3. Panel de Usuario Estándar /usuario/dashboard

diseño compartido con el de administrador pero con solo las siguientes ocpiones

Ver sus propias visitas

Ver visitas activas

Añadir visita

Cambiar estado de visitas

Acceder al enlace de autogestión

Aprobar/rechazar visitas autogestionadas

Restricciones: no puede ver empleados ni visitas antiguas ajenas


4. Registro Manual de Visitas

Ruta: /api/visitas

Método: POST

Campos requeridos:

nombre_visitante

cedula

empresa

motivo

foto

tipo_registro: 'manual'

estado: por defecto 'activa'

empleado_id, sede_id, usuario_id

5. Estado de Visita

Puede ser:

activa

finalizada

rechazada

pendiente (solo en autogestión)

6. Autogestión de Visitas (sin login)

Ruta: /autogestion

Desde el móvil, cualquier visitante puede:

Completar un formulario con sus datos

Enviar una solicitud de visita autogestionada

Almacena como tipo_registro = autogestionado y estado = pendiente

Aparece en dashboards para aprobación o rechazo

7. Gestión de Usuarios (solo admin)

Ver usuarios pendientes (activo = false)

Aprobar usuarios (activar cuenta)

Eliminar usuarios

8. Gestión de Empleados (solo admin)

Ver empleados

Añadir nuevos empleados

Eliminar empleados

añadir sede a la que pertenezca

9. Gestión de Sedes (solo admin)
añadir nuevas sedes
editar sedes
eliminar sedes
asociar sede a usuario estandar

10. Uso de Identificación para Usuarios

- El inicio de sesión se realiza utilizando la identificación (`id`) del usuario en lugar del correo electrónico.
- Las solicitudes de creación de usuario deben validar que el `id` proporcionado exista en la tabla de empleados.
- Si el `id` no está registrado como empleado, la solicitud será rechazada.
-----

Requisitos Técnicos

Backend (Node.js + Express + PostgreSQL)

Autenticación JWT

Bcrypt para hash de contraseñas

Validaciones de campos

Rutas protegidas por middleware

Frontend (React.js)

Interfaz responsive

Paneles diferenciados por rol

Formularios de registro y gestión

Botones y vistas para cambiar estados de visita

Vista especial para autogestión (móvil)

Base de Datos

Tablas requeridas:

usuarios: id, nombre, correo, contraseña, rol, activo, sede_id

visitas: id, nombre_visitante, cedula, empresa, motivo, foto, tipo_registro, estado, fecha_ingreso, fecha_salida, empleado_id, sede_id, usuario_id

empleados: id, nombre, cargo, sede_id

sedes: id, nombre

Flujo de Trabajo Esperado

Inicio de sesión (admin o estándar)

Carga del panel según el rol

Registro de visitas desde panel o enlace de autogestión

Visualización y administración de visitas y usuarios

Aprobación/rechazo de visitas autogestionadas

Finalización manual de visitas activas

Consideraciones Finales

Código debe estar organizado por carpetas (controllers, routes, models, middleware)

Código frontend en React debe tener rutas protegidas y navegación según rol

Se debe garantizar la seguridad y validación de datos en cada paso

Las funciones deben estar bien documentadas para facilitar mantenimiento