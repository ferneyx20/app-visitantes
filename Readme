# Proyecto: Sistema de Registro de Visitantes

## üéØ Objetivo General
Desarrollar una aplicaci√≥n web para registrar, gestionar y controlar el acceso de visitantes a una sede empresarial. Debe incluir autenticaci√≥n, roles de usuario, control de accesos, registro de visitas con foto y lectura de documento, entre otros.

---

## üìå M√≥dulos Funcionales

### 1. Autenticaci√≥n de Usuarios
**Requisitos:**
- Formulario de login.
- Verificaci√≥n de credenciales con bcrypt.
- Generaci√≥n de token JWT.
- Acceso diferenciado seg√∫n rol (admin o est√°ndar).

**Desarrollo:**
- **P√°gina de Login (/login):**
  - Formulario solicitar usuario: correo + contrase√±a.
  - Al enviar: llamada a `POST /api/login`.
  - Redirecci√≥n seg√∫n rol:
    - `admin` ‚Üí Panel de administraci√≥n.
    - `est√°ndar` ‚Üí Panel de autogesti√≥n o visita.

---

### 2. Gesti√≥n de Usuarios (solo Admin)
**Requisitos:**
- Listar usuarios pendientes de aprobaci√≥n (`activo = false`).
- Aprobar usuarios.
- Crear nuevos usuarios (registro).

**Desarrollo:**
- **P√°gina de Aprobaci√≥n de Usuarios (/admin/usuarios):**
  - Tabla de usuarios inactivos.
  - Bot√≥n ‚ÄúAprobar‚Äù.
  - Uso de token con rol admin.

---

### 3. Registro de Visitantes
**Requisitos:**
- Captura de nombre, c√©dula, empresa, motivo.
- Captura de foto desde c√°mara o archivo.
- Selecci√≥n de tipo de registro (manual o autogestionado).
- Estado de la visita (activa, finalizada, rechazada).
- Asociaci√≥n con sede, empleado y usuario que registra.

**Desarrollo:**
- **P√°gina Registro Manual (/registro):**
  - Formulario completo.
  - Campo para captura de foto (input tipo file o c√°mara con JS).
  - Selector de tipo registro.
  - Enviar a `POST /api/visitas`.

- **P√°gina de Autogesti√≥n (visitante) (/autoregistro):**
  - Igual al formulario anterior, simplificado.
  - Env√≠o sin intervenci√≥n de usuario est√°ndar.
  - Estado inicia como activa.
  - **Responsive** para abrirse en m√≥viles.

---

### 4. Gesti√≥n de Visitas
**Requisitos:**
- Listar visitas activas, finalizadas y rechazadas.
- Filtrar por fecha, estado, visitante o empleado.
- Finalizar visita (agrega `fecha_salida`).
- Rechazar visita.

**Desarrollo:**
- **P√°gina de Control de Visitas (/admin/visitas):**
  - Tabla con visitas.
  - Filtros por estado y fechas.
  - Botones para finalizar/rechazar.

---

### 5. Base de Datos
**Tablas principales:**
- `usuarios` (admin/est√°ndar).
- `visitas`.
- `empleados`.
- `sedes`.

**Relaciones:**
- Se relacionan por claves for√°neas.
- Se valida existencia y coherencia de las relaciones.

---

## ‚úÖ Funcionalidades Complementarias

### Seguridad
- Token JWT en todas las rutas protegidas.
- Middleware para verificar token y rol.
- Hash seguro con bcrypt para contrase√±as.

### Validaciones
- **Backend:** campos obligatorios, formatos, longitudes.
- **Frontend:** validaciones visuales antes de enviar.

---

## üõ†Ô∏è Pendientes por Implementar
- **Frontend completo (React):**
  - Login.
  - Registros visitantes (manual/autogesti√≥n).
  - Panel admin (usuarios + visitas).
- Captura de foto en navegador.
- Lectura de documento por c√°mara o lector QR.
- Estilos y UX amigable.
- Exportar registros en CSV o PDF.